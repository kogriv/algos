820. Short Encoding of Words
Medium
Topics
Companies

A valid encoding of an array of words is any reference string s and array of indices indices such that:

    words.length == indices.length
    The reference string s ends with the '#' character.
    For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].

Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.

 

Example 1:

Input: words = ["time", "me", "bell"]
Output: 10
Explanation: A valid encoding would be s = "time#bell#" and indices = [0, 2, 5].
words[0] = "time", the substring of s starting from indices[0] = 0 to the next '#' is underlined in "time#bell#"
words[1] = "me", the substring of s starting from indices[1] = 2 to the next '#' is underlined in "time#bell#"
words[2] = "bell", the substring of s starting from indices[2] = 5 to the next '#' is underlined in "time#bell#"

Example 2:

Input: words = ["t"]
Output: 2
Explanation: A valid encoding would be s = "t#" and indices = [0].

 

Constraints:

    1 <= words.length <= 2000
    1 <= words[i].length <= 7
    words[i] consists of only lowercase letters.

-------------------------


Дано множество слов (массив words). Нужно создать строку s, которая заканчивается символом # и содержит все слова из words таким образом, чтобы каждое слово можно было найти по индексу внутри s.

Формально:

    words.length == indices.length (количество слов и количество индексов должны совпадать).
    В s каждое слово должно быть представлено в виде подстроки между индексами, указанными в indices, и символом #.
    Надо сделать s максимально короткой.

Разбор примеров:

Пример 1:
Вход: ["time", "me", "bell"]
Возможное решение: s = "time#bell#"

    "time" начинается с индекса 0
    "me" уже содержится в "time", поэтому не нужно добавлять его отдельно
    "bell" начинается с индекса 5
    Итоговая длина s = 10

Пример 2:
Вход: ["t"]
Ответ: "t#" (длина 2), потому что это единственное слово.
Что требуется:

Найти минимально возможную длину строки s, которая удовлетворяет условиям.
Ключевая идея — избежать дублирования окончаний (например, "me" уже есть в "time", значит, отдельно его не нужно учитывать).

---------
Кратко: надо закодировать список слов в одну строку, заканчивающуюся #, так, чтобы она была как можно короче.

Как это работает?
Если одно слово является окончанием другого, то оно не добавляется отдельно. Например, "me" уже есть в "time", значит, "me" не нужно хранить отдельно.

Пример:
Вход: ["time", "me", "bell"]
Кодируем строку: "time#bell#" (длина 10)
Индексы: [0, 2, 5] (где начинаются слова)

Задача — найти минимальную длину такой строки.
-------------

1. Что значит "каждое слово можно найти по индексу в s"?

Это значит, что если у нас есть слово words[i], то оно должно быть полностью представлено в s, начиная с позиции indices[i] и заканчиваясь перед #.

Пример:
Если s = "time#bell#" и indices = [0, 2, 5], то:

    "time" находится в s[0:4] перед #.
    "me" начинается с s[2] и заканчивается перед #.
    "bell" начинается с s[5] и заканчивается перед #.

Каждое слово можно "вырезать" по индексам.
2. Почему words.length == indices.length?

Это означает, что каждому слову в words должен соответствовать индекс в s.

Если слово является частью другого слова, оно всё равно должно быть представлено в s, но его индекс может указывать на часть другого слова.
3. Почему s должна быть "максимально короткой"?

Если мы просто запишем все слова через #, например:
s = "time#me#bell#" (длина 14),

это будет работать, но строка слишком длинная.

Лучше сделать короче, исключая дублирующиеся окончания.

Пример:
s = "time#bell#" (длина 10) — здесь "me" не добавляется отдельно, потому что оно уже входит в "time".

Цель — исключить повторения окончаний и сделать s минимальной по длине.
Вывод:

    Нужно закодировать все слова в s, следя за индексами.
    Длина s должна быть минимальной.
    Если одно слово уже содержится в другом (например, "me" в "time"), оно не добавляется отдельно.
    Мы ищем самое короткое возможное s, которое всё ещё содержит все слова как подстроки между #.
    
-------------------

